INCLUDE irvine32.inc

.data
table byte 'o ','s ','t ','c ','a ','e ','r ','x ','a ','b '
RowSize =($-table)
byte 'h ','m ','r ','i ','m ','e ','q ','u ','y ','u '
byte 'a ','s ','a ','b ','o ','r ','a ','r ','p ','v '
byte 'f ','e ','m ','i ','b ','a ','t ','h ','y ','t '
byte 'a ','a ','u ','h ','h ','u ','z ','a ','p ','r '
byte 'h ','e ','e ','r ','r ','e ','i ','s ','y ','u '
byte 'a ','u ','m ','a ','o ','r ','a ','h ','i ','v '
byte 'f ','e ','t ','h ','s ','a ','m ','h ','y ','t '
byte 'w ','a ','y ','l ','h ','u ','z ','a ','p ','q '
byte 'a ','s ','a ','l ','h ','s ','i ','s ','h ','a '

visited byte 20 dup (0)
visrowsize =($-visited)
byte 180 dup(0)

gap byte "                               ",0;
gap2 byte "                                    ",0;

check dword ?
i dword ?
j dword ?
row dword ?
col dword ?
cnt dword ?
count dword 0
flag dword ?
ecla byte '!'
count2 dword ?
arr byte 10 dup (?)
M1 byte "Enter Row : ",0
M2 byte "Enter Column : ",0
M3 byte "Now You have to find : ",0
M4 byte "You select the Wrong alphabet try Again: ",0
M5 byte "try W,A,S,D for up,left,down and right respectively : ",0
M6 byte "Wrong choice",0
M7 byte "You Found the Word: ",0
M8 byte "Do you want to Try Another? (y/n) ",0
M9 byte "You are going Wrong... Do you want to try again? (y/n) ",0
dic_array byte 10 dup(?)
w byte "w",0
a byte "a",0
s byte "s",0
d byte "d",0
n byte "n",0
holdebx dword 0
holdesi dword 0
holdedx dword 0
holdecx dword 0
holdeax dword 0
holdcol byte ?
hold dword ?
intro byte "Welcome to Word Search Game!",0;
abc byte ?
count4 dword 0
holdeip dword 0
DefaultColor = black + (lightgray * 16)
BlueText = red + (lightgray * 16)

backtrack proto,row1:dword,column1:dword,visit1:dword 

dic byte "!ishaq!muhib!sarim!qurat!faheem!",0

.code

;############################ MAIN ###############################

main PROC

mov eax,defaultcolor
call settextcolor
call clrscr

call visitreset

call print

call find

call crlf
call clrscr
call crlf
call crlf

mov edx,offset gap
call writestring
mov edx,offset intro
call writestring
mov ebx,offset dic
mov ecx,lengthof dic-1
mov esi,offset arr
mov dl,ecla
inc ebx
mov abc,0

t1:
mov al,[ebx]
cmp al,dl
je t2

mov [esi],al
inc abc
inc esi
inc ebx
loop t1

t2:
mov holdesi,esi
mov holdecx,ecx
mov holdedx,edx
mov holdeax,eax
mov holdebx,ebx
call search2d
call crlf
mov ebx,holdebx
mov esi,holdesi
mov ecx,holdecx
mov edx,holdedx
mov abc,0
inc ebx
mov esi,offset arr
loop t1


exit
main endp
;############### END MAIN ###############################



backtrack proc,row1:dword,column1:dword,visit1:dword
push ebp


mov ebx,row1
mov esi,column1
mov edi, visit1

mov eax,0
cmp [edi+esi],al
je cont3
dec ecx
pop ebp
ret 

cont3:
cmp cl,abc
jne a1
mov hold,ecx
call print2
call visitreset
mov ecx,hold
pop ebp
ret 

a1:
mov eax,ecx
mov dl, arr[ecx]
mov al, dl

mov esi,column1
mov ebx,row1
mov eax,[ebx+esi]


cmp [ebx+esi] , dl
je a2
dec ecx
jmp bhr

a2:


mov al,1
mov [edi+esi],al ;visit 1 kia ha



inc ecx
add row1,2
add visit1,2
invoke backtrack,row1,column1,visit1
inc ecx
add column1,18
invoke backtrack,row1,column1,visit1
inc ecx
sub column1,20
sub row1,2
sub visit1,2
invoke backtrack,row1,column1,visit1
inc ecx
add row1,2
add visit1,2
sub column1,20
invoke backtrack,row1,column1,visit1

sub row1,2
add column1,20

mov edi,visit1
mov esi,column1

mov al,0
dec ecx

mov [edi+esi],al

bhr:
pop ebp
ret 
backtrack endp

;*************search2d*****************
search2d proc
push ebp

mov ecx,10
mov i,0
L1:
mov ebx,OFFSET table
mov edi,offset visited
mov eax,i
mov flag,rowsize
mul flag
add ebx,eax
add edi,eax 
mov count,ecx
mov ecx,RowSize
mov esi,0
L2:
mov edx,0
mov eax,0
mov dl,arr[0]


cmp [ebx+esi],dl
jne xxx

mov count4,ecx
mov ecx,0
invoke backtrack, ebx,esi,edi
mov ecx,count4
xxx:

inc esi
loop L2
;call crlf
inc i
mov ecx,count
loop L1
pop ebp
ret
search2d endp

;*************************************




;**********visited print************
visitprint proc
mov ecx,10;
mov i,0
L1:
mov ebx,OFFSET visited;table
mov eax,i
mov flag,rowsize
mul flag
add ebx,eax
mov count,ecx
mov ecx,RowSize
mov esi,0
L2:
mov edx,0
mov eax,0
;mov al,0
;mov [ebx+esi],al
mov al,[ebx+esi]
mov check,eax
mov edx,offset check
call writedec
inc esi
loop L2
call crlf
inc i
mov ecx,count
loop L1
ret
visitprint endp



;****************** visited zero *************
visitreset PROC
mov ecx,10;
mov i,0
L1:
mov ebx,OFFSET visited ;table
mov eax,i
mov flag,rowsize
mul flag
add ebx,eax
mov count,ecx
mov ecx,RowSize
mov esi,0
L2:
mov edx,0
mov eax,0

mov [ebx+esi],al
mov al,[ebx+esi]
mov check,eax
	;mov edx,offset check
	;call writedec
inc esi
loop L2
	;call crlf
inc i
mov ecx,count
loop L1
ret
visitreset endp


;############################ PRINT TABLE colour ###############################

print2 PROC
call crlf
call crlf
mov edx,offset gap2
call writestring
mov flag,rowsize
mov ecx,10
mov i,0
L1: mov ebx,OFFSET table
mov edi,offset visited
mov eax,i
mul flag
add ebx,eax
add edi,eax
mov count,ecx
mov ecx,RowSize
mov esi,0
L2: mov eax,defaultcolor
call settextcolor
mov al,[ebx+esi]
mov abc,al
mov al,0
cmp [edi+esi],al
je col1
mov eax,bluetext
call settextcolor
col1: movzx eax,abc

call writechar
inc esi
loop L2
call crlf
mov edx,offset gap2
call writestring
inc i
mov ecx,count
loop L1
ret
print2 endp

;############################ END PRINT TABLE ###############################



;############################ PRINT TABLE ###############################

print PROC
mov ecx,10
call crlf
call crlf
mov edx,offset gap
call writestring
mov edx,offset intro
call writestring
call crlf
call crlf
mov edx,offset gap2
call writestring
mov i,0

L1:
	mov ebx,OFFSET table
	mov eax,i
	mov flag,rowsize
	mul flag
	add ebx,eax
	mov count,ecx
	mov ecx,RowSize
	mov esi,0
	L2:
		mov edx,0
		mov eax,0

		mov al,[ebx+esi]
		call writechar

		inc esi
	loop L2

	call crlf
	mov edx,offset gap2
	call writestring
	inc i
	mov ecx,count
loop L1
ret
print endp

;############################ END PRINT TABLE ###############################


;############################ INITIAL ###############################

initial PROC

mov flag,rowsize
call crlf
call crlf
mov edx,offset gap
call writestring
mov edx,offset m1
call writestring
call readint
mov row,eax
dec eax
mul flag
mov ebx,OFFSET table
add ebx,eax
mov ecx,2
mov edx,offset gap
call writestring
mov edx,offset m2
call writestring
call readint
mov col,eax
dec eax
mul ecx
mov esi,eax

mov edx,0
mov eax,0
mov al,[ebx+esi]
mov check,eax
mov edx,offset check

ret
initial endp

;############################ INITIAL END ###############################

;############################ FINDING WORDS ###############################
find PROC

above:
mov cnt,0
mov esi,offset dic_array
mov ecx,lengthof dic_array

;########################### for Clearing array ########################
 
clear:
	mov al,[esi]
	mov al,0
	mov [esi],al
	inc esi
loop clear

call initial

mov edx,0
mov ecx,lengthof dic
mov esi,offset dic
mov dl,ecla

;##################### checking excalaimation marks ##########################

l3:
	cmp [esi],dl
	je g1
jne g2


;####################### comparing first word ############################

g1:
inc count
inc esi
mov eax,0
mov eax,[esi]
mov ebx,check
cmp al,bl
jz d0


g2:
inc esi

loop l3


call crlf
call crlf
mov edx,offset M4
call writestring
jmp above

d0:
call crlf
call crlf
mov edx,offset M3
call writestring

mov edx,0
mov ecx,lengthof dic
mov dl,ecla
mov ebx,offset dic_array

d1:
cmp [esi],dl
jne d2
je d3

d2:
mov eax,[esi]
mov [ebx],eax
inc ebx
inc esi
inc cnt
call writechar


Loop d1

d3:
call crlf
call crlf

dec cnt
mov ecx,cnt
mov ebx,1

;###################### for right move ######################

L9:
call crlf
mov edx,offset M5
call writestring
call readchar
cmp al,d
jnz W1

mov count2,ebx
mov flag,rowsize
mov eax,row
dec eax
mul flag
mov ebx,OFFSET table
add ebx,eax

mov count,ecx
mov ecx,2
mov eax,col
mul ecx
mov esi,eax

mov al,[ebx+esi]
mov ebx, count2
cmp al,dic_array[ebx]
jnz W2
inc ebx
call writechar
mov ecx,count
inc col
loop L9

;################ printing the word that user found #################

W4:
call crlf
mov edx,offset M7
call writestring

inc cnt

mov ecx,cnt
mov ebx,0
L10:
movzx eax,dic_array[ebx]
inc ebx
call writechar
loop L10

;######################### for finding another word #######################

call crlf
call crlf
mov edx,offset M8
call writestring
call readchar
cmp al,n
jnz above
call crlf
ret

;########################## for down move ##################################

W1:
cmp al,s
jnz W5

mov count2,ebx
mov flag,rowsize
mov eax,row
mul flag
mov ebx,OFFSET table
add ebx,eax

mov count,ecx
mov ecx,2
mov eax,col
dec eax      
mul ecx
mov esi,eax      
mov al,[ebx+esi]
mov ebx, count2
cmp al,dic_array[ebx]

jnz W2

inc ebx
call writechar
mov ecx,count
dec ecx
cmp ecx,0
jz W4
inc row
jmp L9

;################################ for above move ##########################3####

W5:
cmp al,w
jnz W6


mov count2,ebx
mov flag,rowsize
mov eax,row
dec eax
dec eax
mul flag
mov ebx,OFFSET table
add ebx,eax

mov count,ecx
mov ecx,2
mov eax,col
dec eax      
mul ecx
mov esi,eax      
mov al,[ebx+esi]
mov ebx, count2
cmp al,dic_array[ebx]

jnz W2

inc ebx
call writechar
mov ecx,count
dec ecx
cmp ecx,0
jz W4
dec row
jmp L9

;############################## for left move ###########################
 
W6:
cmp al,a
jnz W2


mov count2,ebx
mov flag,rowsize
mov eax,row
dec eax
mul flag
mov ebx,OFFSET table
add ebx,eax

mov count,ecx
mov ecx,2
mov eax,col     
dec eax
dec eax
mul ecx
mov esi,eax    

mov al,[ebx+esi]
call writechar
mov ebx, count2
cmp al,dic_array[ebx]
jnz W2
inc ebx
mov ecx,count
dec ecx
cmp ecx,0
jz W4
dec col
jmp L9


;########################### wrong word ##############################

W2:
call crlf
mov edx,offset M9
call writestring
call readchar
cmp al,n
jnz above
call crlf

ret
find endp

;############################ FINDING WORDS END ###############################


end main